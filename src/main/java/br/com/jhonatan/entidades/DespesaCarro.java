package br.com.jhonatan.entidades;

import java.io.Serializable;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import javax.persistence.CascadeType;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.JoinTable;
import javax.persistence.NamedQueries;
import javax.persistence.NamedQuery;
import javax.persistence.OneToMany;
import javax.persistence.SequenceGenerator;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;
import javax.persistence.Transient;

import org.springframework.format.annotation.DateTimeFormat;

import br.com.jhonatan.util.Constantes;
import br.com.jhonatan.util.NumberUtil;

/**
 * DespesaCarro generated by hbm2java
 */
@NamedQueries( {
	@NamedQuery(name=DespesaCarro.CONSULTAR_DESPESA_CARRO_PERIODO,
		query="select distinct dc from DespesaCarro dc "
				+ " join fetch dc.itemDespesaCarros idc "
				+ " where dc.data between ?1 and ?2"),
				
	@NamedQuery(name=DespesaCarro.CONSULTAR_TODAS_DESPESAS_CARRO,
			query="select distinct dc from DespesaCarro dc "
					+ " join fetch dc.itemDespesaCarros idc order by dc.km"),
					
	@NamedQuery(name=DespesaCarro.CONSULTAR_DESPESA_CARRO_POR_ID_FETCHED,
			query="select distinct dc from DespesaCarro dc "
					+ " join fetch dc.itemDespesaCarros idc where dc.id = ?1")
				

})

@Entity
@Table(name = "despesa_carro", schema = "personal_control")
public class DespesaCarro implements Serializable {

	private static final long serialVersionUID = 598761704442941495L;

	public static final String CONSULTAR_DESPESA_CARRO_PERIODO = "despesaCarro.consultarDespesaCarroPeriodo";
	public static final String CONSULTAR_TODAS_DESPESAS_CARRO = "despesaCarro.consultarTodas";
	public static final String CONSULTAR_DESPESA_CARRO_POR_ID_FETCHED = "despesaCarro.consultarDespesaCarroPorIdFetched";

	@Id
	@GeneratedValue(generator="despesa_carro_seq", strategy=GenerationType.SEQUENCE)
	@SequenceGenerator(name="despesa_carro_seq", sequenceName="despesa_carro_id_despesa_carro_seq", schema="personal_control")
	@Column(name = "id_despesa_carro", unique = true, nullable = false, columnDefinition="bigserial")
	private Long id;

	@Column(name = "km", nullable = false, length = 6)
	private String km;
	
	@Temporal(TemporalType.DATE)
	@Column(name="data")
	@DateTimeFormat(pattern=Constantes.FORMATO_DATA_PT_BR)
	private Date data;
	
	/**
	 * Segundo a documentação do hibernate, é melhor usar o JoinTable para mapeamentos unidirecionais (estava tendo problemas no bidirecional)
	 * 
	 * 2.2.5.3.1.2. Unidirectional
	 *	A unidirectional one to many using a foreign key column in the owned entity is not that common and not really recommended. 
	 * We strongly advise you to use a join table for this kind of association (as explained in the next section). 
	 * This kind of association is described through a @JoinColumn
	 * 
     * 2.2.5.3.1.3. Unidirectional with join table
	 * A unidirectional one to many with join table is much preferred. This association is described through an @JoinTable.
	 * 
	 * @see http://docs.jboss.org/hibernate/stable/annotations/reference/en/html_single/#entity-mapping-association-collections
	 */
	@OneToMany(fetch = FetchType.LAZY,cascade=CascadeType.ALL, orphanRemoval=true)
	@JoinTable(
            name="personal_control.join_despesa_carro",
            joinColumns = @JoinColumn( name="id_despesa_carro"),
            inverseJoinColumns = @JoinColumn( name="id_item_despesa_carro")
    )
	private List<ItemDespesaCarro> itemDespesaCarros;
	
	@Transient
	@DateTimeFormat(pattern = Constantes.FORMATO_DATA_PT_BR)
	private Date inicio;
	
	@Transient
	@DateTimeFormat(pattern = Constantes.FORMATO_DATA_PT_BR)
	private Date fim;
	
	public DespesaCarro() {
		this.itemDespesaCarros = new ArrayList<ItemDespesaCarro>();
	}
	
	public Long getId() {
		return id;
	}

	public String getKm() {
		return km;
	}

	public void setKm(String km) {
		this.km = km;
	}

	public List<ItemDespesaCarro> getItemDespesaCarros() {
		return itemDespesaCarros;
	}

	public void setItemDespesaCarros(List<ItemDespesaCarro> itemDespesaCarros) {
		this.itemDespesaCarros = itemDespesaCarros;
	}

	public Date getData() {
		return data;
	}

	public void setData(Date data) {
		this.data = data;
	}
	
	@Transient
	public Double getValorTotal() {
		Double valorTotal = 0D;
		for (ItemDespesaCarro item : this.itemDespesaCarros) {
			valorTotal += item.getValorItem();
		}
		return NumberUtil.normalizarDouble(valorTotal, 2);
	}
	
	public Date getInicioFormatado() {
		if (inicio == null) {
			SimpleDateFormat sdf = new SimpleDateFormat(Constantes.FORMATO_DATA_PT_BR);
			try {
				inicio = sdf.parse("01/01/1970");
			} catch (ParseException e) {
				e.printStackTrace();
			}
		}
		return inicio;
	}

	public void setInicio(Date inicio) {
		this.inicio = inicio;
	}

	public Date getFimFormatado() {
		if (fim == null) {
			SimpleDateFormat sdf = new SimpleDateFormat(Constantes.FORMATO_DATA_PT_BR);
			try {
				fim = sdf.parse("01/01/3000");
			} catch (ParseException e) {
				e.printStackTrace();
			}
		}
		return fim;
	}
	
	public void setFim(Date fim) {
		this.fim = fim;
	}
	
	public Date getInicio() {
		return inicio;
	}

	public Date getFim() {
		return fim;
	}

}
